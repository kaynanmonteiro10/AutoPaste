 import tkinter as tk
from tkinter import ttk, messagebox
from PIL import Image, ImageGrab, ImageTk
import os
import sys
import time
import win32com.client
import threading
import atexit
import json
import hashlib
import datetime
import random

# Constantes e Vari√°veis Globais
PASTA_FOTOS = os.path.join(os.path.dirname(sys.executable), "fotos_copiadas")
ARQUIVO_TERMOS = os.path.join(os.path.dirname(sys.executable), "termos_aceitos.txt")
ARQUIVO_CONFIG = os.path.join(os.path.dirname(sys.executable), "config.json")
ARQUIVO_USUARIOS = os.path.join(os.path.dirname(sys.executable), "usuarios.json")
MODELO_PPT = os.path.join(os.path.dirname(sys.executable), "modelo_book.pptx")
ultimo_texto_processado = ""
ultima_imagem_hash = None
historico_lojas = []
dados_lojas = []  # Para armazenar lojas a serem coladas com "Colar Tudo"
historico_undo = []

# Cores
CORES = {
    "fundo_claro": "#e0ece4",
    "fundo_escuro": "#3c3c3c",
    "texto_claro": "#333333",
    "texto_escuro": "#ffffff",
    "botao_colar_fotos": "#87ceeb",
    "botao_inserir_texto": "#98fb98",
    "botao_ruptura_total": "#ff6347",
    "botao_apagar": "#ffdead",
    "botao_limpar": "#dda0dd",
    "botao_adicionar": "#ffd700",
    "botao_colar_tudo": "#00ced1",
    "botao_redimensionar": "#f0e68c",
    "botao_desfazer": "#c0c0c0",
    "botao_ajuda": "#20b2aa",
    "botao_hover_claro": "#add8e6",
    "botao_hover_escuro": "#666666",
    "marca_dagua_claro": "#666666",
    "marca_dagua_escuro": "#aaaaaa",
}

# Termos de Uso (m√≠nimo 15 linhas)
TERMOS_USO = {
    "pt-br": """
    Termos de Uso do Sistema de Book

    1. **Aceita√ß√£o dos Termos**: Ao utilizar este software, voc√™ concorda plenamente com os termos aqui descritos. Caso n√£o concorde, n√£o utilize o sistema.

    2. **Uso Autorizado**: Este sistema √© projetado exclusivamente para criar e editar apresenta√ß√µes no PowerPoint para fins profissionais relacionados ao gerenciamento de lojas e fornecedores.

    3. **Propriedade Intelectual**: O software √© propriedade exclusiva de Kaynan Monteiro. Todos os direitos s√£o reservados. N√£o √© permitida a c√≥pia, distribui√ß√£o ou modifica√ß√£o sem autoriza√ß√£o expressa.

    4. **Responsabilidade do Usu√°rio**: O usu√°rio √© totalmente respons√°vel por quaisquer dados inseridos no sistema, incluindo textos e imagens.

    5. **Limita√ß√£o de Responsabilidade**: O desenvolvedor n√£o se responsabiliza por erros, perdas de dados ou danos decorrentes do uso inadequado do software.

    6. **Atualiza√ß√µes e Manuten√ß√£o**: O software pode receber atualiza√ß√µes peri√≥dicas para melhorar funcionalidades ou corrigir problemas. O usu√°rio deve aceit√°-las para continuar o uso.

    7. **Privacidade**: Dados inseridos no sistema n√£o s√£o coletados pelo desenvolvedor, mas o usu√°rio deve garantir que respeitam as leis de privacidade aplic√°veis.

    8. **Suporte T√©cnico**: Suporte ser√° oferecido apenas por canais oficiais indicados pelo desenvolvedor, sem garantia de tempo de resposta.

    9. **Uso Comercial**: O sistema pode ser usado para fins comerciais, desde que respeite os termos aqui descritos.

    10. **Rescis√£o**: O uso pode ser encerrado pelo desenvolvedor caso os termos sejam violados.

    11. **Backups**: √â responsabilidade do usu√°rio salvar regularmente os arquivos gerados no PowerPoint.

    12. **Compatibilidade**: O sistema foi testado com vers√µes espec√≠ficas do PowerPoint; o desenvolvedor n√£o garante funcionamento em todas as vers√µes.

    13. **Licen√ßa**: Este software √© licenciado, n√£o vendido. O usu√°rio recebe apenas o direito de uso.

    14. **Altera√ß√µes nos Termos**: Os termos podem ser atualizados, e o usu√°rio ser√° notificado ao iniciar o sistema.

    15. **Contato**: D√∫vidas devem ser enviadas ao e-mail oficial do desenvolvedor: kaynan@example.com.

    Aceite estes termos clicando em "Aceitar" para prosseguir.
    """,
    "en": """
    Terms of Use of the Book System

    1. **Acceptance of Terms**: By using this software, you fully agree to the terms described herein. If you do not agree, do not use the system.

    2. **Authorized Use**: This system is designed solely for creating and editing PowerPoint presentations for professional purposes related to store and supplier management.

    3. **Intellectual Property**: The software is the exclusive property of Kaynan Monteiro. All rights are reserved. Copying, distribution, or modification without express permission is prohibited.

    4. **User Responsibility**: The user is fully responsible for any data entered into the system, including texts and images.

    5. **Liability Limitation**: The developer is not responsible for errors, data loss, or damages resulting from improper use of the software.

    6. **Updates and Maintenance**: The software may receive periodic updates to enhance features or fix issues. Users must accept them to continue using it.

    7. **Privacy**: Data entered into the system is not collected by the developer, but users must ensure compliance with applicable privacy laws.

    8. **Technical Support**: Support will be provided only through official channels specified by the developer, with no guaranteed response time.

    9. **Commercial Use**: The system may be used for commercial purposes, provided these terms are respected.

    10. **Termination**: Use may be terminated by the developer if these terms are violated.

    11. **Backups**: It is the user's responsibility to regularly save the generated PowerPoint files.

    12. **Compatibility**: The system has been tested with specific PowerPoint versions; the developer does not guarantee functionality across all versions.

    13. **License**: This software is licensed, not sold. The user is granted only a right to use it.

    14. **Changes to Terms**: These terms may be updated, and users will be notified upon starting the system.

    15. **Contact**: Questions should be sent to the developer's official email: kaynan@example.com.

    Accept these terms by clicking "Accept" to proceed.
    """,
    "es": """
    T√©rminos de Uso del Sistema de Book

    1. **Aceptaci√≥n de los T√©rminos**: Al usar este software, usted acepta completamente los t√©rminos aqu√≠ descritos. Si no est√° de acuerdo, no utilice el sistema.

    2. **Uso Autorizado**: Este sistema est√° dise√±ado exclusivamente para crear y editar presentaciones en PowerPoint para fines profesionales relacionados con la gesti√≥n de tiendas y proveedores.

    3. **Propiedad Intelectual**: El software es propiedad exclusiva de Kaynan Monteiro. Todos los derechos est√°n reservados. No se permite copiar, distribuir o modificar sin permiso expreso.

    4. **Responsabilidad del Usuario**: El usuario es totalmente responsable de cualquier dato ingresado en el sistema, incluidos textos e im√°genes.

    5. **Limitaci√≥n de Responsabilidad**: El desarrollador no se responsabiliza por errores, p√©rdida de datos o da√±os derivados del uso indebido del software.

    6. **Actualizaciones y Mantenimiento**: El software puede recibir actualizaciones peri√≥dicas para mejorar funciones o corregir problemas. Los usuarios deben aceptarlas para continuar us√°ndolo.

    7. **Privacidad**: Los datos ingresados en el sistema no son recolectados por el desarrollador, pero el usuario debe garantizar que cumplen con las leyes de privacidad aplicables.

    8. **Soporte T√©cnico**: El soporte se proporcionar√° solo a trav√©s de canales oficiales indicados por el desarrollador, sin garant√≠a de tiempo de respuesta.

    9. **Uso Comercial**: El sistema puede usarse con fines comerciales, siempre que se respeten estos t√©rminos.

    10. **Terminaci√≥n**: El uso puede ser finalizado por el desarrollador si se violan estos t√©rminos.

    11. **Respaldos**: Es responsabilidad del usuario guardar regularmente los archivos generados en PowerPoint.

    12. **Compatibilidad**: El sistema ha sido probado con versiones espec√≠ficas de PowerPoint; el desarrollador no garantiza su funcionamiento en todas las versiones.

    13. **Licencia**: Este software est√° licenciado, no vendido. Al usuario se le otorga solo el derecho de uso.

    14. **Cambios en los T√©rminos**: Estos t√©rminos pueden actualizarse, y los usuarios ser√°n notificados al iniciar el sistema.

    15. **Contacto**: Las dudas deben enviarse al correo oficial del desarrollador: kaynan@example.com.

    Acepte estos t√©rminos haciendo clic en "Aceptar" para continuar.
    """
}

FATOR_ESCALA = 96 / 3.50
FORMATACOES = {
    1: [{"left": 2.12, "top": 3.27, "width": 17.07, "height": 13.04}],
    2: [{"left": 0.17, "top": 2.73, "width": 10.02, "height": 13.85}, {"left": 11.18, "top": 2.73, "width": 10.02, "height": 13.85}],
    3: [{"left": 0.17, "top": 2.73, "width": 8.89, "height": 6.79}, {"left": 9.82, "top": 2.73, "width": 8.89, "height": 6.79}, {"left": 4.66, "top": 10.06, "width": 9.95, "height": 6.79}],
    4: [{"left": 0.17, "top": 2.73, "width": 8.89, "height": 6.79}, {"left": 9.82, "top": 2.73, "width": 8.89, "height": 6.79}, {"left": 0.20, "top": 9.78, "width": 8.87, "height": 6.79}, {"left": 9.82, "top": 9.78, "width": 8.89, "height": 6.67}],
    5: [{"left": 0.14, "top": 2.61, "width": 7.27, "height": 5.29}, {"left": 7.79, "top": 2.82, "width": 7.26, "height": 5.29}, {"left": 15.63, "top": 2.63, "width": 7.87, "height": 5.29}, {"left": 1.27, "top": 8.47, "width": 9.56, "height": 9.86}, {"left": 12.2, "top": 8.51, "width": 9.56, "height": 9.86}],
    6: [{"left": 0.11, "top": 2.98, "width": 7.96, "height": 5.77}, {"left": 8.18, "top": 3.01, "width": 7.96, "height": 5.77}, {"left": 16.22, "top": 3.08, "width": 7.87, "height": 5.43}, {"left": 0.2, "top": 9.63, "width": 7.87, "height": 6.05}, {"left": 8.18, "top": 9.63, "width": 7.87, "height": 6.05}, {"left": 16.14, "top": 9.63, "width": 7.87, "height": 6.05}],
}

TRADUCOES = {
    "pt-br": {
        "titulo": "Sistema de Book",
        "colar_fotos": "üì∏ Colar Fotos",
        "inserir_texto": "‚úçÔ∏è Inserir Textos",
        "ruptura_total": "‚ö†Ô∏è Ruptura Total",
        "apagar_ppt": "üóëÔ∏è Apagar PPT",
        "limpar_interface": "üßπ Limpar Interface",
        "ajuda": "‚ùì Ajuda",
        "lojas_processadas": "Lojas Processadas:",
        "configuracoes": "Configura√ß√µes",
        "tema_claro": "Tema Claro",
        "tema_escuro": "Tema Escuro",
        "idioma": "Idioma",
        "portugues": "Portugu√™s (BR)",
        "ingles": "Ingl√™s",
        "espanhol": "Espanhol",
        "termos": "Termos de Uso",
        "adicionar_loja": "‚ûï Adicionar Loja",
        "colar_tudo": "üìë Colar Tudo",
        "redimensionar": "üñåÔ∏è Redimensionar",
        "desfazer": "‚Ü∫ Desfazer",
        "fornecedor": "FORNECEDOR:",
        "promotor": "PROMOTOR:",
        "rede": "REDE:",
        "loja": "LOJA:",
        "analista": "ANALISTA:",
        "estado": "ESTADO:",
        "cidade": "CIDADE:",
        "data": "DATA:",
        "hora": "HORA:",
        "salvar_config": "Salvar Configura√ß√µes",
        "carregar_config": "Carregar Configura√ß√µes",
        "aguarde": "Aguarde...",
        "concluido": "Conclu√≠do!",
        "bem_vindo": "Bem-vindo ao Sistema de Book!",
        "iniciar_sistema": "Iniciar Sistema",
        "login": "Login",
        "cadastro": "Cadastro",
        "nome": "Nome:",
        "senha": "Senha:",
        "regiao": "Regi√£o:",
        "fornecedores": "Fornecedores (separados por v√≠rgula):",
        "entrar": "Entrar",
        "cadastrar": "Cadastrar",
        "usuario_nao_encontrado": "Usu√°rio n√£o encontrado ou senha incorreta!",
        "usuario_cadastrado": "Usu√°rio cadastrado com sucesso!",
        "versao": "Vers√£o 1.0 - Mar√ßo 2025",
        "excluir_tudo": "Excluir Tudo",
        "excluir": "Excluir",
        "filtrar": "Filtrar",
    },
    "en": {
        "titulo": "Book System",
        "colar_fotos": "üì∏ Paste Photos",
        "inserir_texto": "‚úçÔ∏è Insert Texts",
        "ruptura_total": "‚ö†Ô∏è Total Rupture",
        "apagar_ppt": "üóëÔ∏è Delete PPT",
        "limpar_interface": "üßπ Clear Interface",
        "ajuda": "‚ùì Help",
        "lojas_processadas": "Processed Stores:",
        "configuracoes": "Settings",
        "tema_claro": "Light Theme",
        "tema_escuro": "Dark Theme",
        "idioma": "Language",
        "portugues": "Portuguese (BR)",
        "ingles": "English",
        "espanhol": "Spanish",
        "termos": "Terms of Use",
        "adicionar_loja": "‚ûï Add Store",
        "colar_tudo": "üìë Paste All",
        "redimensionar": "üñåÔ∏è Resize",
        "desfazer": "‚Ü∫ Undo",
        "fornecedor": "SUPPLIER:",
        "promotor": "PROMOTER:",
        "rede": "NETWORK:",
        "loja": "STORE:",
        "analista": "ANALYST:",
        "estado": "STATE:",
        "cidade": "CITY:",
        "data": "DATE:",
        "hora": "TIME:",
        "salvar_config": "Save Settings",
        "carregar_config": "Load Settings",
        "aguarde": "Please wait...",
        "concluido": "Done!",
        "bem_vindo": "Welcome to the Book System!",
        "iniciar_sistema": "Start System",
        "login": "Login",
        "cadastro": "Register",
        "nome": "Name:",
        "senha": "Password:",
        "regiao": "Region:",
        "fornecedores": "Suppliers (comma-separated):",
        "entrar": "Log In",
        "cadastrar": "Register",
        "usuario_nao_encontrado": "User not found or incorrect password!",
        "usuario_cadastrado": "User registered successfully!",
        "versao": "Version 1.0 - March 2025",
        "excluir_tudo": "Delete All",
        "excluir": "Delete",
        "filtrar": "Filter",
    },
    "es": {
        "titulo": "Sistema de Book",
        "colar_fotos": "üì∏ Pegar Fotos",
        "inserir_texto": "‚úçÔ∏è Insertar Textos",
        "ruptura_total": "‚ö†Ô∏è Ruptura Total",
        "apagar_ppt": "üóëÔ∏è Eliminar PPT",
        "limpar_interface": "üßπ Limpiar Interfaz",
        "ajuda": "‚ùì Ayuda",
        "lojas_processadas": "Tiendas Procesadas:",
        "configuracoes": "Configuraciones",
        "tema_claro": "Tema Claro",
        "tema_escuro": "Tema Oscuro",
        "idioma": "Idioma",
        "portugues": "Portugu√©s (BR)",
        "ingles": "Ingl√©s",
        "espanhol": "Espa√±ol",
        "termos": "T√©rminos de Uso",
        "adicionar_loja": "‚ûï A√±adir Tienda",
        "colar_tudo": "üìë Pegar Todo",
        "redimensionar": "üñåÔ∏è Redimensionar",
        "desfazer": "‚Ü∫ Deshacer",
        "fornecedor": "PROVEEDOR:",
        "promotor": "PROMOTOR:",
        "rede": "RED:",
        "loja": "TIENDA:",
        "analista": "ANALISTA:",
        "estado": "ESTADO:",
        "cidade": "CIUDAD:",
        "data": "FECHA:",
        "hora": "HORA:",
        "salvar_config": "Guardar Configuraciones",
        "carregar_config": "Cargar Configuraciones",
        "aguarde": "Espere...",
        "concluido": "¬°Terminado!",
        "bem_vindo": "¬°Bienvenido al Sistema de Book!",
        "iniciar_sistema": "Iniciar Sistema",
        "login": "Iniciar Sesi√≥n",
        "cadastro": "Registro",
        "nome": "Nombre:",
        "senha": "Contrase√±a:",
        "regiao": "Regi√≥n:",
        "fornecedores": "Proveedores (separados por coma):",
        "entrar": "Entrar",
        "cadastrar": "Registrar",
        "usuario_nao_encontrado": "¬°Usuario no encontrado o contrase√±a incorrecta!",
        "usuario_cadastrado": "¬°Usuario registrado con √©xito!",
        "versao": "Versi√≥n 1.0 - Marzo 2025",
        "excluir_tudo": "Eliminar Todo",
        "excluir": "Eliminar",
        "filtrar": "Filtrar",
    },
}

# Fun√ß√µes Utilit√°rias
def verificar_termos_aceitos():
    return os.path.exists(ARQUIVO_TERMOS)

def salvar_aceitacao_termos():
    with open(ARQUIVO_TERMOS, "w") as f:
        f.write(f"Termos aceitos em: {time.ctime()}")

def carregar_configuracoes(tema_atual, idioma_atual):
    if os.path.exists(ARQUIVO_CONFIG):
        with open(ARQUIVO_CONFIG, "r") as f:
            config = json.load(f)
            tema_atual.set(config.get("tema", "claro"))
            idioma_atual.set(config.get("idioma", "pt-br"))

def salvar_configuracoes(tema_atual, idioma_atual):
    config = {"tema": tema_atual.get(), "idioma": idioma_atual.get()}
    with open(ARQUIVO_CONFIG, "w") as f:
        json.dump(config, f)
    messagebox.showinfo("Sucesso", TRADUCOES[idioma_atual.get()]["salvar_config"])

def carregar_usuarios():
    if os.path.exists(ARQUIVO_USUARIOS):
        with open(ARQUIVO_USUARIOS, "r") as f:
            return json.load(f)
    return {}

def salvar_usuarios(usuarios):
    with open(ARQUIVO_USUARIOS, "w") as f:
        json.dump(usuarios, f, indent=4)

def salvar_historico_lojas():
    with open(os.path.join(os.path.dirname(sys.executable), "historico_lojas.json"), "w") as f:
        json.dump(historico_lojas, f)

def carregar_historico_lojas():
    global historico_lojas, dados_lojas
    caminho_historico = os.path.join(os.path.dirname(sys.executable), "historico_lojas.json")
    if os.path.exists(caminho_historico):
        with open(caminho_historico, "r") as f:
            historico_lojas = json.load(f)
        # Verificar e corrigir caminhos de fotos
        for loja in historico_lojas:
            fotos_validas = []
            for foto in loja["fotos"]:
                if os.path.exists(foto):
                    fotos_validas.append(foto)
                else:
                    print(f"Foto n√£o encontrada: {foto}")
            loja["fotos"] = fotos_validas
        # Carregar em dados_lojas para "Colar Tudo"
        dados_lojas = historico_lojas.copy()
    else:
        historico_lojas = []
        dados_lojas = []

def mostrar_tela_bem_vindo():
    janela_bem_vindo = tk.Tk()
    janela_bem_vindo.title("Bem-vindo")
    janela_bem_vindo.attributes('-fullscreen', True)
    janela_bem_vindo.configure(bg=CORES["fundo_claro"])

    canvas = tk.Canvas(janela_bem_vindo, bg=CORES["fundo_claro"], highlightthickness=0)
    canvas.pack(fill="both", expand=True)

    nuvens = []
    for _ in range(5):
        x = random.randint(0, janela_bem_vindo.winfo_screenwidth())
        y = random.randint(0, 200)
        nuvem = canvas.create_text(x, y, text="‚òÅÔ∏è", font=("Segoe UI", 40), fill=CORES["texto_claro"])
        nuvens.append(nuvem)

    def animar_nuvens():
        for nuvem in nuvens:
            canvas.move(nuvem, 1, 0)
            if canvas.coords(nuvem)[0] > janela_bem_vindo.winfo_screenwidth():
                canvas.coords(nuvem, -50, canvas.coords(nuvem)[1])
        janela_bem_vindo.after(50, animar_nuvens)

    animar_nuvens()

    frame_central = ttk.Frame(janela_bem_vindo)
    frame_central.place(relx=0.5, rely=0.5, anchor="center")

    ttk.Label(frame_central, text=TRADUCOES["pt-br"]["bem_vindo"], font=("Segoe UI", 36, "bold")).pack(pady=10)
    data_hora = ttk.Label(frame_central, text=f"Data: {datetime.datetime.now().strftime('%d/%m/%Y')} | Hora: {datetime.datetime.now().strftime('%H:%M:%S')}", font=("Segoe UI", 16))
    data_hora.pack(pady=5)

    def atualizar_hora():
        data_hora.config(text=f"Data: {datetime.datetime.now().strftime('%d/%m/%Y')} | Hora: {datetime.datetime.now().strftime('%H:%M:%S')}")
        janela_bem_vindo.after(1000, atualizar_hora)
    atualizar_hora()

    ttk.Label(frame_central, text=TRADUCOES["pt-br"]["versao"], font=("Segoe UI", 12)).pack(pady=5)

    def mostrar_login():
        for widget in frame_central.winfo_children()[3:]:
            widget.destroy()

        ttk.Label(frame_central, text=TRADUCOES["pt-br"]["login"], font=("Segoe UI", 24)).pack(pady=10)
        ttk.Label(frame_central, text=TRADUCOES["pt-br"]["nome"]).pack()
        entry_nome = ttk.Entry(frame_central, width=30)
        entry_nome.pack(pady=5)
        ttk.Label(frame_central, text=TRADUCOES["pt-br"]["senha"]).pack()
        entry_senha = ttk.Entry(frame_central, width=30, show="*")
        entry_senha.pack(pady=5)

        def verificar_login():
            usuarios = carregar_usuarios()
            nome = entry_nome.get().strip()
            senha = entry_senha.get().strip()
            if nome in usuarios and usuarios[nome]["senha"] == senha:
                animar_portas(nome)
            else:
                messagebox.showerror("Erro", TRADUCOES["pt-br"]["usuario_nao_encontrado"])

        ttk.Button(frame_central, text=TRADUCOES["pt-br"]["entrar"], command=verificar_login).pack(pady=5)
        ttk.Button(frame_central, text=TRADUCOES["pt-br"]["cadastro"], command=mostrar_cadastro).pack(pady=5)

    def mostrar_cadastro():
        for widget in frame_central.winfo_children()[3:]:
            widget.destroy()

        ttk.Label(frame_central, text=TRADUCOES["pt-br"]["cadastro"], font=("Segoe UI", 24)).pack(pady=10)
        ttk.Label(frame_central, text=TRADUCOES["pt-br"]["nome"]).pack()
        entry_nome = ttk.Entry(frame_central, width=30)
        entry_nome.pack(pady=5)
        ttk.Label(frame_central, text=TRADUCOES["pt-br"]["senha"]).pack()
        entry_senha = ttk.Entry(frame_central, width=30, show="*")
        entry_senha.pack(pady=5)
        ttk.Label(frame_central, text=TRADUCOES["pt-br"]["regiao"]).pack()
        entry_regiao = ttk.Entry(frame_central, width=30)
        entry_regiao.pack(pady=5)
        ttk.Label(frame_central, text=TRADUCOES["pt-br"]["fornecedores"]).pack()
        entry_fornecedores = ttk.Entry(frame_central, width=30)
        entry_fornecedores.pack(pady=5)

        def cadastrar_usuario():
            usuarios = carregar_usuarios()
            nome = entry_nome.get().strip()
            senha = entry_senha.get().strip()
            regiao = entry_regiao.get().strip()
            fornecedores = [f.strip() for f in entry_fornecedores.get().split(",") if f.strip()]
            if nome and senha and regiao:
                usuarios[nome] = {"senha": senha, "regiao": regiao, "fornecedores": fornecedores}
                salvar_usuarios(usuarios)
                messagebox.showinfo("Sucesso", TRADUCOES["pt-br"]["usuario_cadastrado"])
                mostrar_login()
            else:
                messagebox.showwarning("Aviso", "Preencha todos os campos obrigat√≥rios!")

        ttk.Button(frame_central, text=TRADUCOES["pt-br"]["cadastrar"], command=cadastrar_usuario).pack(pady=5)
        ttk.Button(frame_central, text=TRADUCOES["pt-br"]["login"], command=mostrar_login).pack(pady=5)

    def animar_portas(nome_usuario):
        for widget in frame_central.winfo_children():
            widget.pack_forget()

        canvas_anim = tk.Canvas(frame_central, bg=CORES["fundo_claro"], width=800, height=600)
        canvas_anim.pack()

        canvas_anim.create_text(400, 100, text="‚òÅÔ∏è‚òÅÔ∏è‚òÅÔ∏è", font=("Segoe UI", 40), fill=CORES["texto_claro"])
        canvas_anim.create_text(400, 500, text="‚òÅÔ∏è‚òÅÔ∏è‚òÅÔ∏è", font=("Segoe UI", 40), fill=CORES["texto_claro"])

        pessoa_esq = canvas_anim.create_text(300, 300, text="üë§", font=("Segoe UI", 60), fill=CORES["texto_claro"])
        pessoa_dir = canvas_anim.create_text(500, 300, text="üë§", font=("Segoe UI", 60), fill=CORES["texto_claro"])
        porta_esq = canvas_anim.create_rectangle(350, 200, 400, 400, fill="#8b4513", outline="")
        porta_dir = canvas_anim.create_rectangle(400, 200, 450, 400, fill="#8b4513", outline="")

        for i in range(20):
            canvas_anim.move(porta_esq, -10, 0)
            canvas_anim.move(pessoa_esq, -10, 0)
            canvas_anim.move(porta_dir, 10, 0)
            canvas_anim.move(pessoa_dir, 10, 0)
            janela_bem_vindo.update()
            time.sleep(0.05)

        canvas_anim.create_text(400, 300, text=f"Entrando, {nome_usuario}!", font=("Segoe UI", 24, "bold"), fill=CORES["texto_claro"])
        janela_bem_vindo.update()
        time.sleep(1)
        janela_bem_vindo.destroy()
        iniciar_sistema()

    mostrar_login()
    janela_bem_vindo.bind("<Escape>", lambda e: janela_bem_vindo.destroy())
    janela_bem_vindo.mainloop()

def mostrar_termos_uso(janela_principal):
    janela_termos = tk.Toplevel(janela_principal)
    janela_termos.title(TRADUCOES["pt-br"]["termos"])
    janela_termos.geometry("600x700")
    janela_termos.transient(janela_principal)
    janela_termos.grab_set()

    texto_termos = tk.Text(janela_termos, wrap=tk.WORD, height=35, width=70, bg=CORES["fundo_claro"], fg=CORES["texto_claro"], font=("Segoe UI", 10))
    texto_termos.insert(tk.END, TERMOS_USO["pt-br"])
    texto_termos.config(state=tk.DISABLED)
    texto_termos.pack(padx=10, pady=10)

    frame_botoes = ttk.Frame(janela_termos)
    frame_botoes.pack(pady=10)
    if not verificar_termos_aceitos():
        ttk.Button(frame_botoes, text="Aceitar", command=lambda: [salvar_aceitacao_termos(), janela_termos.destroy()]).pack(side=tk.LEFT, padx=5)
        ttk.Button(frame_botoes, text="Recusar", command=lambda: [janela_termos.destroy(), janela_principal.destroy(), sys.exit(0)]).pack(side=tk.LEFT, padx=5)
    else:
        ttk.Button(frame_botoes, text="Fechar", command=janela_termos.destroy).pack(side=tk.LEFT, padx=5)

def criar_pasta_fotos():
    if not os.path.exists(PASTA_FOTOS):
        os.makedirs(PASTA_FOTOS)

def limpar_pasta_temp():
    for arquivo in os.listdir(PASTA_FOTOS):
        if not arquivo.startswith("copia_"):
            caminho_arquivo = os.path.join(PASTA_FOTOS, arquivo)
            if os.path.isfile(caminho_arquivo):
                os.remove(caminho_arquivo)

def finalizar_sistema():
    limpar_pasta_temp()

atexit.register(finalizar_sistema)

def cm_para_pixels(cm):
    return int(cm * FATOR_ESCALA)

def salvar_estado(entradas, frame_imagens):
    textos = {k: v.get() for k, v in entradas.items()}
    fotos = [os.path.join(PASTA_FOTOS, f) for f in os.listdir(PASTA_FOTOS) if f.lower().endswith(('.png', '.jpg', '.jpeg')) and not f.startswith("copia_")]
    historico_undo.append({"textos": textos.copy(), "fotos": fotos[:]})
    if len(historico_undo) > 20:
        historico_undo.pop(0)

def desfazer_estado():
    if not historico_undo:
        return None
    return historico_undo.pop()

# Fun√ß√µes de Anima√ß√£o
def animar_colar_fotos(callback):
    canvas_anim = tk.Canvas(janela, bg=CORES["fundo_claro"], width=400, height=300)
    canvas_anim.place(relx=0.5, rely=0.5, anchor="center")
    foto = canvas_anim.create_text(200, 150, text="üì∏", font=("Segoe UI", 80), fill=CORES["texto_claro"])
    cola = canvas_anim.create_text(200, 150, text="üß¥", font=("Segoe UI", 60), fill=CORES["texto_claro"])

    for i in range(10):
        canvas_anim.move(foto, 0, -10 if i % 2 == 0 else 10)
        canvas_anim.move(cola, 0, 10 if i % 2 == 0 else -10)
        janela.update()
        time.sleep(0.1)
    canvas_anim.place_forget()
    callback()

def animar_ruptura_total(callback):
    canvas_anim = tk.Canvas(janela, bg=CORES["fundo_claro"], width=400, height=300)
    canvas_anim.place(relx=0.5, rely=0.5, anchor="center")
    simbolo = canvas_anim.create_text(200, 150, text="‚ö†Ô∏è", font=("Segoe UI", 120), fill=CORES["botao_ruptura_total"])

    for i in range(5):
        canvas_anim.itemconfig(simbolo, font=("Segoe UI", 120 + i * 10))
        janela.update()
        time.sleep(0.2)
    canvas_anim.place_forget()
    callback()

def animar_limpar_interface(callback):
    canvas_anim = tk.Canvas(janela, bg=CORES["fundo_claro"], width=400, height=300)
    canvas_anim.place(relx=0.5, rely=0.5, anchor="center")
    vassoura = canvas_anim.create_text(100, 150, text="üßπ", font=("Segoe UI", 80), fill=CORES["texto_claro"])
    poeira = canvas_anim.create_text(200, 150, text="üí®üí®", font=("Segoe UI", 60), fill=CORES["texto_claro"])

    for i in range(15):
        canvas_anim.move(vassoura, 20, 0)
        if i > 5:
            canvas_anim.move(poeira, 20, -10)
        janela.update()
        time.sleep(0.1)
    canvas_anim.place_forget()
    callback()

def animar_apagar(callback):
    canvas_anim = tk.Canvas(janela, bg=CORES["fundo_claro"], width=400, height=300)
    canvas_anim.place(relx=0.5, rely=0.5, anchor="center")
    lixeira = canvas_anim.create_text(200, 150, text="üóëÔ∏è", font=("Segoe UI", 80), fill=CORES["botao_apagar"])

    for i in range(10):
        canvas_anim.move(lixeira, 0, -10 if i % 2 == 0 else 10)
        janela.update()
        time.sleep(0.1)
    canvas_anim.place_forget()
    callback()

# Fun√ß√µes do PowerPoint
def colar_fotos_no_powerpoint(manual, entradas, frame_imagens, status_label):
    fotos = [f for f in os.listdir(PASTA_FOTOS) if f.lower().endswith(('.png', '.jpg', '.jpeg')) and not f.startswith("copia_")]
    if not fotos:
        messagebox.showwarning("Aviso", "Nenhuma foto para colar.")
        return
    def executar():
        powerpoint = win32com.client.Dispatch("PowerPoint.Application")
        if not powerpoint.Presentations.Count:
            abrir_modelo_powerpoint()
        apresentacao = powerpoint.ActivePresentation
        slide_atual = apresentacao.Slides(powerpoint.ActiveWindow.Selection.SlideRange.SlideIndex)
        num_fotos = len(fotos)
        if num_fotos in FORMATACOES:
            status_label.config(text="Colando fotos...")
            salvar_estado(entradas, frame_imagens)
            colar_fotos_com_formatacao(slide_atual, fotos, FORMATACOES[num_fotos], manual)
            textos = {k: v.get() for k, v in entradas.items()}
            inserir_texto_no_powerpoint(slide_atual, textos)
            limpar_apenas_textos(entradas)
            limpar_apenas_imagens(frame_imagens)
            limpar_historico(frame_imagens)
            apresentacao.Save()
            status_label.config(text="Pronto!")
            messagebox.showinfo("Sucesso", "Fotos e textos colados!")
        else:
            messagebox.showwarning("Aviso", f"Sem formata√ß√£o para {num_fotos} fotos.")
    animar_colar_fotos(executar)

def inserir_apenas_texto_no_powerpoint(entradas, frame_imagens, status_label):
    powerpoint = win32com.client.Dispatch("PowerPoint.Application")
    if not powerpoint.Presentations.Count:
        abrir_modelo_powerpoint()
    apresentacao = powerpoint.ActivePresentation
    slide_atual = apresentacao.Slides(powerpoint.ActiveWindow.Selection.SlideRange.SlideIndex)
    status_label.config(text="Inserindo textos...")
    salvar_estado(entradas, frame_imagens)
    for i in range(3):
        status_label.config(text=f"Inserindo textos{' .' * (i+1)}")
        janela.update()
        time.sleep(0.2)
    textos = {k: v.get() for k, v in entradas.items()}
    inserir_texto_no_powerpoint(slide_atual, textos)
    limpar_apenas_textos(entradas)
    limpar_historico(frame_imagens)
    apresentacao.Save()
    status_label.config(text="Pronto!")
    messagebox.showinfo("Sucesso", "Textos inseridos!")

def apagar_elementos_powerpoint(opcao, status_label):
    def executar():
        powerpoint = win32com.client.Dispatch("PowerPoint.Application")
        if not powerpoint.Presentations.Count:
            abrir_modelo_powerpoint()
        apresentacao = powerpoint.ActivePresentation
        slide_atual = apresentacao.Slides(powerpoint.ActiveWindow.Selection.SlideRange.SlideIndex)
        status_label.config(text=f"Apagando {opcao.lower()}...")
        fotos_apagadas = 0
        textos_apagados = 0
        campos_esperados = ["FORNECEDOR", "PROMOTOR", "REDE", "LOJA", "ANALISTA", "ESTADO", "CIDADE", "DATA", "HORA"]
        for shape in slide_atual.Shapes:
            if (opcao == "Fotos" or opcao == "Fotos e Textos") and shape.Type == 13:
                shape.Delete()
                fotos_apagadas += 1
            if (opcao == "Textos" or opcao == "Fotos e Textos") and shape.HasTextFrame:
                texto = shape.TextFrame.TextRange.Text.strip()
                for campo in campos_esperados:
                    if texto.startswith(campo + ":"):
                        shape.TextFrame.TextRange.Text = campo + ":"
                        textos_apagados += 1
        apresentacao.Save()
        status_label.config(text="Pronto!")
        messagebox.showinfo("Sucesso", f"Apagados: {fotos_apagadas} fotos, {textos_apagados} textos.")
    animar_apagar(executar)

def ruptura_total(status_label):
    def executar():
        powerpoint = win32com.client.Dispatch("PowerPoint.Application")
        if not powerpoint.Presentations.Count:
            abrir_modelo_powerpoint()
        apresentacao = powerpoint.ActivePresentation
        slide_atual = apresentacao.Slides(powerpoint.ActiveWindow.Selection.SlideRange.SlideIndex)
        status_label.config(text="Inserindo Ruptura Total...")
        formatacao = FORMATACOES[1][0]
        left = cm_para_pixels(formatacao["left"])
        top = cm_para_pixels(formatacao["top"])
        width = cm_para_pixels(formatacao["width"])
        height = cm_para_pixels(formatacao["height"])
        shape = slide_atual.Shapes.AddTextbox(1, left, top, width, height)
        shape.TextFrame.TextRange.Text = "RUPTURA TOTAL"
        shape.TextFrame.TextRange.Font.Size = 46
        shape.TextFrame.TextRange.Font.Bold = True
        shape.TextFrame.TextRange.Font.Name = "Arial"
        shape.TextFrame.TextRange.ParagraphFormat.Alignment = 2
        apresentacao.Save()
        status_label.config(text="Pronto!")
        messagebox.showinfo("Sucesso", "Ruptura Total inserida!")
    animar_ruptura_total(executar)

def colar_tudo_no_powerpoint(entradas, frame_imagens, status_label, botao_colar_tudo):
    if not dados_lojas:
        messagebox.showwarning("Aviso", "Nenhuma loja adicionada ou carregada do hist√≥rico.")
        return
    def executar():
        powerpoint = win32com.client.Dispatch("PowerPoint.Application")
        if not powerpoint.Presentations.Count:
            abrir_modelo_powerpoint()
        apresentacao = powerpoint.ActivePresentation
        if apresentacao.Slides.Count < 2:
            messagebox.showerror("Erro", "A apresenta√ß√£o precisa ter pelo menos 2 slides.")
            return
        total_lojas = len(dados_lojas)
        tempo_estimado = total_lojas * 0.5
        botao_colar_tudo.config(state="disabled")
        status_label.config(text=f"{TRADUCOES[idioma_atual.get()]['aguarde']} ({tempo_estimado:.1f}s)")
        dino_frames = ["ü¶ñ", "ü¶ñ", "ü¶ñ", "üèÉ‚Äç‚ôÇÔ∏è", "üèÉ‚Äç‚ôÇÔ∏è", "üèÉ‚Äç‚ôÇÔ∏è"]
        cacto_frames = ["üåµ", "üåµ", "", "", "üåµ", ""]
        def animar_espera(contador=0):
            if contador < total_lojas * 2:
                frame_idx = contador % len(dino_frames)
                status_label.config(text=f"{TRADUCOES[idioma_atual.get()]['aguarde']} ({tempo_estimado - contador * 0.1:.1f}s) {dino_frames[frame_idx]} {cacto_frames[frame_idx]}")
                janela.after(100, animar_espera, contador + 1)
            else:
                status_label.config(text=TRADUCOES[idioma_atual.get()]["concluido"])
        threading.Thread(target=animar_espera, daemon=True).start()
        num_slides = apresentacao.Slides.Count
        slide_modelo = apresentacao.Slides(num_slides - 1)
        for i, loja in enumerate(dados_lojas):
            novo_slide = slide_modelo.Duplicate()
            novo_slide.MoveTo(num_slides + i)
            limpar_slide(novo_slide)
            num_fotos = len(loja["fotos"])
            if num_fotos in FORMATACOES:
                colar_fotos_com_formatacao(novo_slide, loja["fotos"], FORMATACOES[num_fotos])
                inserir_texto_no_powerpoint(novo_slide, loja["textos"])
            janela.update()
            time.sleep(0.1)
        limpar_apenas_textos(entradas)
        limpar_apenas_imagens(frame_imagens)
        limpar_historico(frame_imagens)
        dados_lojas.clear()
        apresentacao.Save()
        botao_colar_tudo.config(state="normal")
        messagebox.showinfo("Sucesso", f"{total_lojas} lojas processadas!")
    animar_colar_fotos(executar)

def abrir_modelo_powerpoint():
    powerpoint = win32com.client.Dispatch("PowerPoint.Application")
    powerpoint.Visible = True
    if os.path.exists(MODELO_PPT):
        apresentacao = powerpoint.Presentations.Open(MODELO_PPT)
        return apresentacao
    else:
        messagebox.showwarning("Aviso", "Modelo 'modelo_book.pptx' n√£o encontrado. Criando novo arquivo.")
        apresentacao = powerpoint.Presentations.Add()
        apresentacao.Slides.Add(1, 11)
        apresentacao.Slides.Add(2, 12)
        apresentacao.Slides.Add(3, 11)
        apresentacao.SaveAs(MODELO_PPT)
        return apresentacao

def colar_fotos_com_formatacao(slide, fotos, formatacao, manual=False):
    for i, (foto, coord) in enumerate(zip(fotos, formatacao)):
        caminho_foto = foto if os.path.isabs(foto) else os.path.join(PASTA_FOTOS, foto)
        if not os.path.exists(caminho_foto):
            continue
        imagem = Image.open(caminho_foto)
        left = cm_para_pixels(coord["left"])
        top = cm_para_pixels(coord["top"])
        if manual and not os.path.basename(caminho_foto).startswith("compressed_"):
            width = imagem.width
            height = imagem.height
        else:
            width = cm_para_pixels(coord["width"])
            height = cm_para_pixels(coord["height"])
            imagem_resized = imagem.resize((width, height), Image.Resampling.LANCZOS)
            caminho_foto_comprimida = os.path.join(PASTA_FOTOS, f"compressed_{os.path.basename(caminho_foto)}")
            imagem_resized.save(caminho_foto_comprimida, quality=50)
            caminho_foto = caminho_foto_comprimida
        slide.Shapes.AddPicture(caminho_foto, False, True, left, top, width, height)

def inserir_texto_no_powerpoint(slide, textos):
    for shape in slide.Shapes:
        if shape.HasTextFrame:
            texto_shape = shape.TextFrame.TextRange.Text.strip()
            for campo, valor in textos.items():
                if texto_shape.startswith(campo + ":"):
                    shape.TextFrame.TextRange.Text = f"{campo}: {valor}"

def limpar_slide(slide):
    campos_esperados = ["FORNECEDOR", "PROMOTOR", "REDE", "LOJA", "ANALISTA", "ESTADO", "CIDADE", "DATA", "HORA"]
    for shape in slide.Shapes:
        if shape.Type == 13:  # Imagens
            shape.Delete()
        elif shape.HasTextFrame:
            texto = shape.TextFrame.TextRange.Text.strip()
            for campo in campos_esperados:
                if texto.startswith(campo + ":"):
                    shape.TextFrame.TextRange.Text = campo + ":"

# Fun√ß√µes da Interface
def limpar_apenas_textos(entradas):
    global ultimo_texto_processado
    for entrada in entradas.values():
        entrada.delete(0, tk.END)
    ultimo_texto_processado = ""

def limpar_apenas_imagens(frame_imagens):
    global ultima_imagem_hash
    limpar_pasta_temp()
    ultima_imagem_hash = None
    limpar_historico(frame_imagens)

def limpar_historico(frame_imagens):
    for widget in frame_imagens.winfo_children():
        widget.destroy()

def extrair_e_preencher_textos(entradas):
    global ultimo_texto_processado
    try:
        texto = janela.clipboard_get()
        if not texto or texto == ultimo_texto_processado or len(texto) > 1000:
            return
        ultimo_texto_processado = texto
        
        campos_esperados = ["FORNECEDOR", "PROMOTOR", "REDE", "LOJA", "ANALISTA", "ESTADO", "CIDADE", "DATA", "HORA"]
        linhas = [linha.strip() for linha in texto.splitlines() if linha.strip()]
        
        # Primeiro, tenta o formato atual "CAMPO: VALOR"
        preenchido = False
        for linha in linhas:
            if ":" in linha:
                campo, valor = linha.split(":", 1)
                campo = campo.strip().upper()
                if campo in campos_esperados and campo in entradas:
                    entradas[campo].delete(0, tk.END)
                    entradas[campo].insert(0, valor.strip())
                    preenchido = True
        
        # Se n√£o preencheu tudo ou o formato √© diferente, tenta deduzir
        if not preenchido or not all(":" in linha for linha in linhas):
            redes_conhecidas = ["Atacad√£o","Assai","Mix Mateus", "Carrefour", "Extra", "P√£o de A√ß√∫car"]  # Adicione mais redes conforme necess√°rio
            data_pattern = r"(\d{2}[/-]\d{2}[/-]\d{2,4})"  # Reconhece DD/MM/AA ou DD/MM/AAAA
            estado_pattern = r"^(AC|AL|AP|AM|BA|CE|DF|ES|GO|MA|MT|MS|MG|PA|PB|PR|PE|PI|RJ|RN|RS|RO|RR|SC|SP|SE|TO)$"  # Siglas de estados
            import re
            
            loja = ""
            rede = ""
            data = ""
            promotor = ""
            analista = ""
            cidade = ""
            estado = ""
            
            for linha in linhas:
                # Verifica se √© uma data
                if re.match(data_pattern, linha):
                    data = linha
                # Verifica se √© uma sigla de estado no final da linha
                elif re.match(estado_pattern, linha.split()[-1].upper()):
                    partes = linha.split()
                    estado = partes[-1].upper()
                    # Tenta extrair cidade do que sobra antes do estado
                    cidade_potencial = " ".join(partes[:-1])
                    for rede_conhecida in redes_conhecidas:
                        if rede_conhecida in cidade_potencial:
                            rede = rede_conhecida
                            loja = cidade_potencial.replace(rede_conhecida, "").strip()
                            break
                    if not rede:
                        loja = cidade_potencial
                # Verifica se cont√©m "Promotor" seguido de um nome
                elif linha.lower().startswith("promotor "):
                    promotor = linha[9:].strip()  # Remove "Promotor " do in√≠cio
                # Verifica se cont√©m uma rede conhecida
                elif any(rede_conhecida in linha for rede_conhecida in redes_conhecidas):
                    partes = linha.split()
                    for rede_conhecida in redes_conhecidas:
                        if rede_conhecida in linha:
                            rede = rede_conhecida
                            loja = linha.replace(rede_conhecida, "").strip()
                            # Se j√° identificou estado antes, ajusta a loja
                            if estado and estado in loja:
                                loja = loja.replace(estado, "").strip()
                            break
                # Assume que uma linha curta sem padr√£o espec√≠fico pode ser uma cidade ou pessoa
                elif len(linha.split()) <= 2 and not re.match(r"\d", linha):
                    if not promotor and not analista:
                        analista = linha  # Primeiro assume como analista, a menos que "Promotor" esteja expl√≠cito
                    elif not cidade and linha != promotor and linha != analista:
                        cidade = linha
                # Se n√£o encaixa nos padr√µes acima, pode ser a loja completa
                elif not loja and not ":" in linha:
                    loja = linha
            
            # Preenche os campos deduzidos
            if rede and "REDE" in entradas:
                entradas["REDE"].delete(0, tk.END)
                entradas["REDE"].insert(0, rede)
            if loja and "LOJA" in entradas:
                entradas["LOJA"].delete(0, tk.END)
                entradas["LOJA"].insert(0, loja)
            if data and "DATA" in entradas:
                entradas["DATA"].delete(0, tk.END)
                entradas["DATA"].insert(0, data)
            if promotor and "PROMOTOR" in entradas:
                entradas["PROMOTOR"].delete(0, tk.END)
                entradas["PROMOTOR"].insert(0, promotor)
            elif analista and "ANALISTA" in entradas:
                entradas["ANALISTA"].delete(0, tk.END)
                entradas["ANALISTA"].insert(0, analista)
            if cidade and "CIDADE" in entradas:
                entradas["CIDADE"].delete(0, tk.END)
                entradas["CIDADE"].insert(0, cidade)
            if estado and "ESTADO" in entradas:
                entradas["ESTADO"].delete(0, tk.END)
                entradas["ESTADO"].insert(0, estado)
        
        janela.clipboard_clear()
    except tk.TclError:
        pass
def salvar_e_exibir_imagem(frame_imagens):
    global ultima_imagem_hash
    imagem = ImageGrab.grabclipboard()
    if not imagem or not isinstance(imagem, Image.Image):
        return
    imagem_hash = hashlib.md5(imagem.tobytes()).hexdigest()
    if imagem_hash == ultima_imagem_hash:
        return
    ultima_imagem_hash = imagem_hash
    nome_arquivo = f"foto_{int(time.time())}.png"
    caminho_arquivo = os.path.join(PASTA_FOTOS, nome_arquivo)
    imagem.save(caminho_arquivo)
    imagem.thumbnail((200, 200))  # Aumentado para 200x200
    imagem_tk = ImageTk.PhotoImage(imagem)
    frame_foto = ttk.Frame(frame_imagens)
    frame_foto.pack(side=tk.LEFT, padx=5, pady=5)
    label_imagem = ttk.Label(frame_foto, image=imagem_tk)
    label_imagem.image = imagem_tk
    label_imagem.pack()
    ttk.Button(frame_foto, text="üóëÔ∏è", command=lambda f=caminho_arquivo: excluir_foto_temp(f, frame_imagens)).pack(pady=2)
    janela.clipboard_clear()

def excluir_foto_temp(foto, frame_imagens):
    if os.path.exists(foto):
        os.remove(foto)
    limpar_historico(frame_imagens)
    atualizar_imagens_interface(frame_imagens)

def atualizar_historico_lojas(frame_historico, entradas, frame_imagens, filtros=None):
    for widget in frame_historico.winfo_children():
        widget.destroy()
    
    ttk.Label(frame_historico, text=TRADUCOES[idioma_atual.get()]["lojas_processadas"], font=("Segoe UI", 10, "bold")).pack(anchor="w", pady=2)
    lojas_filtradas = historico_lojas
    if filtros:
        lojas_filtradas = [loja for loja in historico_lojas if all(loja["textos"].get(campo, "").lower().startswith(valor.lower()) for campo, valor in filtros.items() if valor)]
    
    canvas_historico = tk.Canvas(frame_historico, height=150)  # Reduzido para 150
    scrollbar = ttk.Scrollbar(frame_historico, orient="vertical", command=canvas_historico.yview)
    frame_lista = ttk.Frame(canvas_historico)
    canvas_historico.configure(yscrollcommand=scrollbar.set)
    
    canvas_historico.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
    canvas_historico.create_window((0, 0), window=frame_lista, anchor="nw")
    
    for i, loja in enumerate(lojas_filtradas):
        texto_loja = f"{loja['textos']['LOJA']} ({loja['textos'].get('CIDADE', '-')}, {loja['textos'].get('ESTADO', '-')}) - {len(loja['fotos'])} fotos"
        frame_loja = ttk.Frame(frame_lista)
        frame_loja.pack(fill=tk.X, pady=2)  # Alinhado verticalmente
        ttk.Button(frame_loja, text=texto_loja, command=lambda idx=i: carregar_loja(idx, lojas_filtradas, entradas, frame_imagens)).pack(side=tk.LEFT)
        ttk.Button(frame_loja, text=TRADUCOES[idioma_atual.get()]["excluir"], command=lambda idx=i: excluir_loja(idx, frame_historico, entradas, frame_imagens)).pack(side=tk.RIGHT, padx=2)
    
    frame_botoes_historico = ttk.Frame(frame_historico)
    frame_botoes_historico.pack(pady=2)
    ttk.Button(frame_botoes_historico, text=TRADUCOES[idioma_atual.get()]["excluir_tudo"], command=lambda: excluir_todas_lojas(frame_historico, entradas, frame_imagens)).pack(side=tk.LEFT, padx=2)
    ttk.Button(frame_botoes_historico, text=TRADUCOES[idioma_atual.get()]["filtrar"], command=lambda: abrir_janela_filtros(frame_historico, entradas, frame_imagens)).pack(side=tk.LEFT, padx=2)
    
    frame_lista.update_idletasks()
    canvas_historico.configure(scrollregion=canvas_historico.bbox("all"))
    canvas_historico.create_window((0, 0), window=frame_lista, anchor="nw")
    
def carregar_loja(indice, lojas_filtradas, entradas, frame_imagens):
    if 0 <= indice < len(lojas_filtradas):
        loja = lojas_filtradas[indice]
        # Preencher formul√°rio
        limpar_apenas_textos(entradas)
        for campo, valor in loja["textos"].items():
            if campo in entradas:
                entradas[campo].delete(0, tk.END)
                entradas[campo].insert(0, valor)
        # Exibir fotos
        limpar_apenas_imagens(frame_imagens)
        for foto in loja["fotos"]:
            if os.path.exists(foto):
                imagem = Image.open(foto)
                imagem.thumbnail((200, 200))  # Aumentado para 200x200
                imagem_tk = ImageTk.PhotoImage(imagem)
                frame_foto = ttk.Frame(frame_imagens)
                frame_foto.pack(side=tk.LEFT, padx=5, pady=5)
                label_imagem = ttk.Label(frame_foto, image=imagem_tk)
                label_imagem.image = imagem_tk
                label_imagem.pack()
                ttk.Button(frame_foto, text="üóëÔ∏è", command=lambda f=foto, idx=indice: excluir_foto_loja(idx, f, frame_historico, entradas, frame_imagens)).pack(pady=2)

def excluir_foto_loja(indice, foto, frame_historico, entradas, frame_imagens):
    if 0 <= indice < len(historico_lojas):
        loja = historico_lojas[indice]
        if foto in loja["fotos"]:
            loja["fotos"].remove(foto)
            if os.path.exists(foto):
                os.remove(foto)
            salvar_historico_lojas()
            atualizar_historico_lojas(frame_historico, entradas, frame_imagens)
            messagebox.showinfo("Sucesso", f"Foto removida da loja '{loja['textos']['LOJA']}'!")
            # Recarregar a loja ap√≥s exclus√£o
            carregar_loja(indice, historico_lojas, entradas, frame_imagens)  # Corrigido

def excluir_loja(indice, frame_historico, entradas, frame_imagens):
    if 0 <= indice < len(historico_lojas):
        loja_removida = historico_lojas.pop(indice)
        dados_lojas.pop(indice)  # Remover tamb√©m de dados_lojas
        for foto in loja_removida["fotos"]:
            if os.path.exists(foto):
                os.remove(foto)
        salvar_historico_lojas()
        atualizar_historico_lojas(frame_historico, entradas, frame_imagens)
        limpar_apenas_textos(entradas)
        limpar_apenas_imagens(frame_imagens)
        messagebox.showinfo("Sucesso", f"Loja '{loja_removida['textos']['LOJA']}' exclu√≠da!")

def excluir_todas_lojas(frame_historico, entradas, frame_imagens):
    if messagebox.askyesno("Confirma√ß√£o", "Deseja excluir todas as lojas do hist√≥rico?"):
        for loja in historico_lojas:
            for foto in loja["fotos"]:
                if os.path.exists(foto):
                    os.remove(foto)
        historico_lojas.clear()
        dados_lojas.clear()
        salvar_historico_lojas()
        atualizar_historico_lojas(frame_historico, entradas, frame_imagens)
        limpar_apenas_textos(entradas)
        limpar_apenas_imagens(frame_imagens)
        messagebox.showinfo("Sucesso", "Todas as lojas foram exclu√≠das!")

def abrir_janela_filtros(frame_historico, entradas, frame_imagens):
    janela_filtros = tk.Toplevel(janela)
    janela_filtros.title(TRADUCOES[idioma_atual.get()]["filtrar"])
    janela_filtros.geometry("300x300")
    janela_filtros.transient(janela)
    janela_filtros.grab_set()

    filtros = {}
    campos = ["LOJA", "ESTADO", "CIDADE"]
    for campo in campos:
        ttk.Label(janela_filtros, text=TRADUCOES[idioma_atual.get()][campo.lower()]).pack(pady=5)
        entrada = ttk.Entry(janela_filtros)
        entrada.pack(pady=5)
        filtros[campo] = entrada

    ttk.Button(janela_filtros, text=TRADUCOES[idioma_atual.get()]["filtrar"], command=lambda: [atualizar_historico_lojas(frame_historico, entradas, frame_imagens, {k: v.get() for k, v in filtros.items()}), janela_filtros.destroy()]).pack(pady=10)

def verificar_periodicamente(entradas, frame_imagens):
    threading.Thread(target=lambda: salvar_e_exibir_imagem(frame_imagens), daemon=True).start()
    threading.Thread(target=lambda: extrair_e_preencher_textos(entradas), daemon=True).start()
    janela.after(2500, lambda: verificar_periodicamente(entradas, frame_imagens))

def abrir_menu_apagar(status_label):
    janela_opcao = tk.Toplevel(janela)
    janela_opcao.title("Escolha o que apagar")
    janela_opcao.geometry("250x150")
    janela_opcao.transient(janela)
    janela_opcao.grab_set()
    ttk.Label(janela_opcao, text="O que deseja apagar?").pack(pady=10)
    ttk.Button(janela_opcao, text="Apenas Fotos", command=lambda: [apagar_elementos_powerpoint("Fotos", status_label), janela_opcao.destroy()]).pack(pady=5)
    ttk.Button(janela_opcao, text="Apenas Textos", command=lambda: [apagar_elementos_powerpoint("Textos", status_label), janela_opcao.destroy()]).pack(pady=5)
    ttk.Button(janela_opcao, text="Fotos e Textos", command=lambda: [apagar_elementos_powerpoint("Fotos e Textos", status_label), janela_opcao.destroy()]).pack(pady=5)

def abrir_menu_limpar_interface(entradas, frame_imagens, status_label):
    janela_opcao = tk.Toplevel(janela)
    janela_opcao.title("Limpar Interface")
    janela_opcao.geometry("250x150")
    janela_opcao.transient(janela)
    janela_opcao.grab_set()
    ttk.Label(janela_opcao, text="O que deseja limpar?").pack(pady=10)
    def limpar_com_animacao(opcao):
        def executar():
            janela_opcao.destroy()
            status_label.config(text="üßπ Limpando...")
            salvar_estado(entradas, frame_imagens)
            if opcao == "textos":
                limpar_apenas_textos(entradas)
            elif opcao == "fotos":
                limpar_apenas_imagens(frame_imagens)
            else:
                limpar_apenas_textos(entradas)
                limpar_apenas_imagens(frame_imagens)
            status_label.config(text="Pronto!")
        animar_limpar_interface(executar)
    ttk.Button(janela_opcao, text="Apenas Textos", command=lambda: limpar_com_animacao("textos")).pack(pady=5)
    ttk.Button(janela_opcao, text="Apenas Fotos", command=lambda: limpar_com_animacao("fotos")).pack(pady=5)
    ttk.Button(janela_opcao, text="Textos e Fotos", command=lambda: limpar_com_animacao("ambos")).pack(pady=5)

def abrir_janela_redimensionar(entradas, frame_imagens, status_label):
    fotos = [f for f in os.listdir(PASTA_FOTOS) if f.lower().endswith(('.png', '.jpg', '.jpeg')) and not f.startswith("copia_")]
    if not fotos:
        messagebox.showinfo("Aviso", "Nenhuma foto para redimensionar.")
        return
    janela_redim = tk.Toplevel(janela)
    janela_redim.title(TRADUCOES[idioma_atual.get()]["redimensionar"])
    janela_redim.geometry("450x550")
    janela_redim.transient(janela)
    janela_redim.grab_set()
    ttk.Label(janela_redim, text="Selecione a foto:").pack(pady=10)
    combo_fotos = ttk.Combobox(janela_redim, values=[f"Foto {i+1}" for i in range(len(fotos))])
    combo_fotos.pack(pady=5)
    combo_fotos.current(0)
    canvas = tk.Canvas(janela_redim, bg="white")
    canvas.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
    imagem_atual = None
    foto_id = None
    resize_handle = None
    x_inicial, y_inicial = 0, 0
    largura_inicial, altura_inicial = 0, 0

    def carregar_imagem(indice):
        nonlocal imagem_atual, foto_id, resize_handle
        caminho_foto = os.path.join(PASTA_FOTOS, fotos[indice])
        imagem = Image.open(caminho_foto)
        largura, altura = imagem.size
        proporcao = min(350/largura, 350/altura)
        nova_largura = int(largura * proporcao)
        nova_altura = int(altura * proporcao)
        imagem_redim = imagem.resize((nova_largura, nova_altura), Image.Resampling.LANCZOS)
        imagem_atual = ImageTk.PhotoImage(imagem_redim)
        canvas.delete("all")
        foto_id = canvas.create_image(225, 225, image=imagem_atual)
        resize_handle = canvas.create_rectangle(
            225 + nova_largura//2 - 10, 225 + nova_altura//2 - 10,
            225 + nova_largura//2 + 10, 225 + nova_altura//2 + 10,
            fill="#e6e6fa", outline="white", tags="resize_handle"
        )
        canvas.tag_bind("resize_handle", "<Button-1>", iniciar_arrasto)
        canvas.tag_bind("resize_handle", "<B1-Motion>", arrastar)
        canvas.tag_bind("resize_handle", "<ButtonRelease-1>", finalizar_arrasto)

    def iniciar_arrasto(event):
        nonlocal x_inicial, y_inicial, largura_inicial, altura_inicial
        x_inicial, y_inicial = event.x, event.y
        largura_inicial = imagem_atual.width()
        altura_inicial = imagem_atual.height()

    def arrastar(event):
        dx = event.x - x_inicial
        dy = event.y - y_inicial
        nova_largura = max(50, largura_inicial + dx)
        nova_altura = max(50, altura_inicial + dy)
        imagem = Image.open(os.path.join(PASTA_FOTOS, fotos[combo_fotos.current()]))
        imagem_redim = imagem.resize((nova_largura, nova_altura), Image.Resampling.LANCZOS)
        canvas.image = ImageTk.PhotoImage(imagem_redim)
        canvas.itemconfig(foto_id, image=canvas.image)
        canvas.coords("resize_handle", 
                      225 + nova_largura//2 - 10, 225 + nova_altura//2 - 10,
                      225 + nova_largura//2 + 10, 225 + nova_altura//2 + 10)

    def finalizar_arrasto(event):
        nova_largura = canvas.image.width()
        nova_altura = canvas.image.height()
        caminho_foto = os.path.join(PASTA_FOTOS, fotos[combo_fotos.current()])
        imagem = Image.open(caminho_foto)
        imagem_redim = imagem.resize((nova_largura, nova_altura), Image.Resampling.LANCZOS)
        imagem_redim.save(caminho_foto)
        atualizar_imagens_interface(frame_imagens)

    combo_fotos.bind("<<ComboboxSelected>>", lambda e: carregar_imagem(combo_fotos.current()))
    carregar_imagem(0)
    ttk.Button(janela_redim, text=TRADUCOES[idioma_atual.get()]["colar_fotos"], command=lambda: [colar_fotos_no_powerpoint(True, entradas, frame_imagens, status_label), janela_redim.destroy()]).pack(pady=10)

def atualizar_imagens_interface(frame_imagens):
    limpar_historico(frame_imagens)
    for foto in os.listdir(PASTA_FOTOS):
        if foto.lower().endswith(('.png', '.jpg', '.jpeg')) and not foto.startswith("copia_"):
            caminho_arquivo = os.path.join(PASTA_FOTOS, foto)
            imagem = Image.open(caminho_arquivo)
            imagem.thumbnail((200, 200))  # Aumentado para 200x200
            imagem_tk = ImageTk.PhotoImage(imagem)
            frame_foto = ttk.Frame(frame_imagens)
            frame_foto.pack(side=tk.LEFT, padx=5, pady=5)
            label_imagem = ttk.Label(frame_foto, image=imagem_tk)
            label_imagem.image = imagem_tk
            label_imagem.pack()

def adicionar_loja_interface(entradas, frame_imagens, frame_historico, status_label):
    textos = {k: v.get() for k, v in entradas.items()}
    fotos = [os.path.join(PASTA_FOTOS, f) for f in os.listdir(PASTA_FOTOS) if f.lower().endswith(('.png', '.jpg', '.jpeg')) and not f.startswith("copia_")]
    if not textos.get("LOJA") or not fotos:
        messagebox.showwarning("Aviso", "Preencha 'LOJA' e adicione pelo menos uma foto.")
        return
    status_label.config(text="Adicionando loja...")
    fotos_copia = []
    for foto in fotos:
        caminho_copia = os.path.join(PASTA_FOTOS, f"copia_{time.time()}_{os.path.basename(foto)}")
        with open(foto, "rb") as f:
            with open(caminho_copia, "wb") as f_copia:
                f_copia.write(f.read())
        fotos_copia.append(caminho_copia)
    loja_data = {"textos": textos.copy(), "fotos": fotos_copia}
    dados_lojas.append(loja_data)
    historico_lojas.append(loja_data)
    salvar_historico_lojas()
    limpar_apenas_textos(entradas)
    limpar_apenas_imagens(frame_imagens)
    atualizar_historico_lojas(frame_historico, entradas, frame_imagens)
    status_label.config(text=f"Pronto! {len(dados_lojas)} lojas prontas.")
    messagebox.showinfo("Sucesso", f"Loja '{textos['LOJA']}' adicionada! Total: {len(dados_lojas)}")

def desfazer(entradas, frame_imagens, status_label):
    estado = desfazer_estado()
    if not estado:
        messagebox.showinfo("Aviso", "Nada para desfazer.")
        return
    status_label.config(text="Desfazendo...")
    limpar_apenas_textos(entradas)
    limpar_apenas_imagens(frame_imagens)
    for campo, valor in estado["textos"].items():
        entradas[campo].delete(0, tk.END)
        entradas[campo].insert(0, valor)
    for foto in estado["fotos"]:
        caminho_copia = os.path.join(PASTA_FOTOS, f"restaurada_{time.time()}_{os.path.basename(foto)}")
        with open(foto, "rb") as f:
            with open(caminho_copia, "wb") as f_copia:
                f_copia.write(f.read())
        imagem = Image.open(caminho_copia)
        imagem.thumbnail((200, 200))  # Aumentado para 200x200
        imagem_tk = ImageTk.PhotoImage(imagem)
        frame_foto = ttk.Frame(frame_imagens)
        frame_foto.pack(side=tk.LEFT, padx=5, pady=5)
        label_imagem = ttk.Label(frame_foto, image=imagem_tk)
        label_imagem.image = imagem_tk
        label_imagem.pack()
        ttk.Button(frame_foto, text="üóëÔ∏è", command=lambda f=caminho_copia: excluir_foto_temp(f, frame_imagens)).pack(pady=2)
    status_label.config(text="Pronto!")

def abrir_janela_ajuda():
    janela_ajuda = tk.Toplevel(janela)
    janela_ajuda.title(TRADUCOES[idioma_atual.get()]["ajuda"])
    janela_ajuda.geometry("700x600")
    janela_ajuda.transient(janela)
    janela_ajuda.grab_set()
    passos = [
        ("Introdu√ß√£o", "Este √© o Sistema de Book para criar apresenta√ß√µes no PowerPoint."),
        ("Iniciar o Sistema", "Fa√ßa login ou cadastre-se para come√ßar."),
        ("Adicionar uma Loja", "Preencha os campos e clique em 'Adicionar Loja'."),
        ("Colar Tudo", "Clique em 'Colar Tudo' para processar todas as lojas adicionadas."),
        ("Colar Fotos", "Copie fotos para a √°rea de transfer√™ncia e clique em 'Colar Fotos'."),
        ("Inserir Textos", "Copie textos e clique em 'Inserir Textos'."),
        ("Redimensionar Fotos", "Clique em 'Redimensionar' para ajustar o tamanho das fotos."),
        ("Marcar Ruptura Total", "Clique em 'Ruptura Total' para marcar um slide."),
        ("Apagar do PowerPoint", "Escolha o que apagar no PowerPoint com 'Apagar PPT'."),
        ("Limpar a Interface", "Limpe textos ou fotos com 'Limpar Interface'."),
        ("Desfazer A√ß√µes", "Use 'Desfazer' para reverter a √∫ltima a√ß√£o."),
        ("Hist√≥rico de Lojas", "Veja lojas adicionadas, filtre e exclua conforme necess√°rio."),
        ("Dicas Finais", "Salve seu trabalho regularmente no PowerPoint!"),
    ]
    texto_ajuda = tk.Text(janela_ajuda, wrap=tk.WORD, height=30, width=80, bg=CORES["fundo_claro"], fg=CORES["texto_claro"], font=("Segoe UI", 10))
    texto_ajuda.pack(padx=10, pady=10)
    texto_ajuda.insert(tk.END, passos[0][1])
    texto_ajuda.config(state=tk.DISABLED)
    frame_navegacao = ttk.Frame(janela_ajuda)
    frame_navegacao.pack(pady=10)
    passo_atual = tk.IntVar(value=0)
    def atualizar_passo(delta):
        novo_passo = passo_atual.get() + delta
        if 0 <= novo_passo < len(passos):
            passo_atual.set(novo_passo)
            texto_ajuda.config(state=tk.NORMAL)
            texto_ajuda.delete(1.0, tk.END)
            texto_ajuda.insert(tk.END, passos[novo_passo][1])
            texto_ajuda.config(state=tk.DISABLED)
            label_passo.config(text=f"Passo {novo_passo + 1}/{len(passos)}: {passos[novo_passo][0]}")
    ttk.Button(frame_navegacao, text="‚óÑ Anterior", command=lambda: atualizar_passo(-1)).pack(side=tk.LEFT, padx=5)
    label_passo = ttk.Label(frame_navegacao, text=f"Passo 1/{len(passos)}: {passos[0][0]}")
    label_passo.pack(side=tk.LEFT, padx=5)
    ttk.Button(frame_navegacao, text="Pr√≥ximo ‚ñ∫", command=lambda: atualizar_passo(1)).pack(side=tk.LEFT, padx=5)

# Temas e Configura√ß√µes
def aplicar_tema():
    style = ttk.Style()
    if tema_atual.get() == "claro":
        janela.configure(bg=CORES["fundo_claro"])
        style.configure("TLabel", background=CORES["fundo_claro"], foreground=CORES["texto_claro"])
        style.configure("TEntry", fieldbackground="#ffffff", foreground=CORES["texto_claro"])
        style.configure("TButton", background=CORES["fundo_claro"], foreground=CORES["texto_claro"])
        style.configure("ColarFotos.TButton", background=CORES["botao_colar_fotos"])
        style.configure("InserirTexto.TButton", background=CORES["botao_inserir_texto"])
        style.configure("Ruptura.TButton", background=CORES["botao_ruptura_total"])
        style.configure("Apagar.TButton", background=CORES["botao_apagar"])
        style.configure("Limpar.TButton", background=CORES["botao_limpar"])
        style.configure("Adicionar.TButton", background=CORES["botao_adicionar"])
        style.configure("ColarTudo.TButton", background=CORES["botao_colar_tudo"])
        style.configure("Redimensionar.TButton", background=CORES["botao_redimensionar"])
        style.configure("Desfazer.TButton", background=CORES["botao_desfazer"])
        style.configure("Ajuda.TButton", background=CORES["botao_ajuda"])
        style.map("TButton", background=[("active", CORES["botao_hover_claro"])])
        label_marca_dagua.configure(foreground=CORES["marca_dagua_claro"], background=CORES["fundo_claro"])
        frame_imagens.configure(style="TFrame")
        frame_esquerda.configure(style="TFrame")
        frame_direita.configure(style="TFrame")
        frame_historico.configure(style="TFrame")
    else:
        janela.configure(bg=CORES["fundo_escuro"])
        style.configure("TLabel", background=CORES["fundo_escuro"], foreground=CORES["texto_escuro"])
        style.configure("TEntry", fieldbackground="#4a4a4a", foreground=CORES["texto_escuro"])
        style.configure("TButton", background=CORES["fundo_escuro"], foreground=CORES["texto_escuro"])
        style.configure("ColarFotos.TButton", background=CORES["botao_colar_fotos"])
        style.configure("InserirTexto.TButton", background=CORES["botao_inserir_texto"])
        style.configure("Ruptura.TButton", background=CORES["botao_ruptura_total"])
        style.configure("Apagar.TButton", background=CORES["botao_apagar"])
        style.configure("Limpar.TButton", background=CORES["botao_limpar"])
        style.configure("Adicionar.TButton", background=CORES["botao_adicionar"])
        style.configure("ColarTudo.TButton", background=CORES["botao_colar_tudo"])
        style.configure("Redimensionar.TButton", background=CORES["botao_redimensionar"])
        style.configure("Desfazer.TButton", background=CORES["botao_desfazer"])
        style.configure("Ajuda.TButton", background=CORES["botao_ajuda"])
        style.map("TButton", background=[("active", CORES["botao_hover_escuro"])])
        label_marca_dagua.configure(foreground=CORES["marca_dagua_escuro"], background=CORES["fundo_escuro"])
        frame_imagens.configure(style="TFrame")
        frame_esquerda.configure(style="TFrame")
        frame_direita.configure(style="TFrame")
        frame_historico.configure(style="TFrame")
    janela.update()

def abrir_configuracoes():
    janela_config = tk.Toplevel(janela)
    janela_config.title(TRADUCOES[idioma_atual.get()]["configuracoes"])
    janela_config.geometry("300x400")
    janela_config.transient(janela)
    janela_config.grab_set()

    ttk.Label(janela_config, text=TRADUCOES[idioma_atual.get()]["tema_claro"]).pack(pady=5)
    ttk.Radiobutton(janela_config, text=TRADUCOES[idioma_atual.get()]["tema_claro"], value="claro", variable=tema_atual, command=aplicar_tema).pack()
    ttk.Radiobutton(janela_config, text=TRADUCOES[idioma_atual.get()]["tema_escuro"], value="escuro", variable=tema_atual, command=aplicar_tema).pack()

    ttk.Label(janela_config, text=TRADUCOES[idioma_atual.get()]["idioma"]).pack(pady=5)
    ttk.Radiobutton(janela_config, text=TRADUCOES[idioma_atual.get()]["portugues"], value="pt-br", variable=idioma_atual, command=atualizar_textos).pack()
    ttk.Radiobutton(janela_config, text=TRADUCOES[idioma_atual.get()]["ingles"], value="en", variable=idioma_atual, command=atualizar_textos).pack()
    ttk.Radiobutton(janela_config, text=TRADUCOES[idioma_atual.get()]["espanhol"], value="es", variable=idioma_atual, command=atualizar_textos).pack()

    ttk.Button(janela_config, text=TRADUCOES[idioma_atual.get()]["salvar_config"], command=lambda: salvar_configuracoes(tema_atual, idioma_atual)).pack(pady=10)
    ttk.Button(janela_config, text=TRADUCOES[idioma_atual.get()]["carregar_config"], command=lambda: [carregar_configuracoes(tema_atual, idioma_atual), aplicar_tema(), atualizar_textos()]).pack(pady=10)
    ttk.Button(janela_config, text=TRADUCOES[idioma_atual.get()]["termos"], command=lambda: mostrar_termos_uso(janela_config)).pack(pady=10)

def atualizar_textos():
    janela.title(TRADUCOES[idioma_atual.get()]["titulo"])
    botao_colar_fotos.config(text=TRADUCOES[idioma_atual.get()]["colar_fotos"])
    botao_inserir_texto.config(text=TRADUCOES[idioma_atual.get()]["inserir_texto"])
    botao_ruptura_total.config(text=TRADUCOES[idioma_atual.get()]["ruptura_total"])
    botao_apagar.config(text=TRADUCOES[idioma_atual.get()]["apagar_ppt"])
    botao_limpar.config(text=TRADUCOES[idioma_atual.get()]["limpar_interface"])
    botao_adicionar.config(text=TRADUCOES[idioma_atual.get()]["adicionar_loja"])
    botao_colar_tudo.config(text=TRADUCOES[idioma_atual.get()]["colar_tudo"])
    botao_redimensionar.config(text=TRADUCOES[idioma_atual.get()]["redimensionar"])
    botao_desfazer.config(text=TRADUCOES[idioma_atual.get()]["desfazer"])
    botao_ajuda.config(text=TRADUCOES[idioma_atual.get()]["ajuda"])
    for i, label in enumerate(labels_entradas):
        campos = ["fornecedor", "promotor", "rede", "loja", "analista", "estado", "cidade", "data", "hora"]
        label.config(text=TRADUCOES[idioma_atual.get()][campos[i]])
    atualizar_historico_lojas(frame_historico, entradas, frame_imagens)

def toggle_fullscreen(event=None):
    janela.attributes('-fullscreen', not janela.attributes('-fullscreen'))

def reset_size():
    janela.attributes('-fullscreen', False)
    janela.geometry("900x800")

def iniciar_sistema():
    global janela, frame_imagens, frame_historico, botao_colar_fotos, botao_inserir_texto, botao_ruptura_total, botao_apagar, botao_limpar, botao_adicionar, botao_colar_tudo, botao_redimensionar, botao_desfazer, botao_ajuda, label_marca_dagua, labels_entradas, tema_atual, idioma_atual, frame_esquerda, frame_direita, entradas

    if not verificar_termos_aceitos():
        mostrar_termos_uso(None)
        if not verificar_termos_aceitos():
            sys.exit(0)

    criar_pasta_fotos()
    carregar_historico_lojas()

    janela = tk.Tk()
    tema_atual = tk.StringVar(janela, value="claro")
    idioma_atual = tk.StringVar(janela, value="pt-br")
    carregar_configuracoes(tema_atual, idioma_atual)

    janela.title(TRADUCOES[idioma_atual.get()]["titulo"])
    janela.geometry("900x800")
    janela.resizable(True, True)

    janela.bind("<F11>", toggle_fullscreen)
    janela.bind("<Escape>", lambda e: reset_size())

    style = ttk.Style()
    style.configure("TFrame", background=CORES["fundo_claro"])

    # Frame Esquerdo (Bot√µes principais)
    frame_esquerda = ttk.Frame(janela, width=200, style="TFrame")
    frame_esquerda.pack(side=tk.LEFT, fill=tk.Y, padx=10, pady=10)

    botao_colar_fotos = ttk.Button(frame_esquerda, text=TRADUCOES[idioma_atual.get()]["colar_fotos"], command=lambda: colar_fotos_no_powerpoint(False, entradas, frame_imagens, status_label), style="ColarFotos.TButton")
    botao_colar_fotos.pack(pady=5, fill=tk.X)

    botao_inserir_texto = ttk.Button(frame_esquerda, text=TRADUCOES[idioma_atual.get()]["inserir_texto"], command=lambda: inserir_apenas_texto_no_powerpoint(entradas, frame_imagens, status_label), style="InserirTexto.TButton")
    botao_inserir_texto.pack(pady=5, fill=tk.X)

    botao_ruptura_total = ttk.Button(frame_esquerda, text=TRADUCOES[idioma_atual.get()]["ruptura_total"], command=lambda: ruptura_total(status_label), style="Ruptura.TButton")
    botao_ruptura_total.pack(pady=5, fill=tk.X)

    botao_apagar = ttk.Button(frame_esquerda, text=TRADUCOES[idioma_atual.get()]["apagar_ppt"], command=lambda: abrir_menu_apagar(status_label), style="Apagar.TButton")
    botao_apagar.pack(pady=5, fill=tk.X)

    botao_limpar = ttk.Button(frame_esquerda, text=TRADUCOES[idioma_atual.get()]["limpar_interface"], command=lambda: abrir_menu_limpar_interface(entradas, frame_imagens, status_label), style="Limpar.TButton")
    botao_limpar.pack(pady=5, fill=tk.X)

    botao_adicionar = ttk.Button(frame_esquerda, text=TRADUCOES[idioma_atual.get()]["adicionar_loja"], command=lambda: adicionar_loja_interface(entradas, frame_imagens, frame_historico, status_label), style="Adicionar.TButton")
    botao_adicionar.pack(pady=5, fill=tk.X)

    botao_colar_tudo = ttk.Button(frame_esquerda, text=TRADUCOES[idioma_atual.get()]["colar_tudo"], command=lambda: colar_tudo_no_powerpoint(entradas, frame_imagens, status_label, botao_colar_tudo), style="ColarTudo.TButton")
    botao_colar_tudo.pack(pady=5, fill=tk.X)

    botao_redimensionar = ttk.Button(frame_esquerda, text=TRADUCOES[idioma_atual.get()]["redimensionar"], command=lambda: abrir_janela_redimensionar(entradas, frame_imagens, status_label), style="Redimensionar.TButton")
    botao_redimensionar.pack(pady=5, fill=tk.X)

    botao_desfazer = ttk.Button(frame_esquerda, text=TRADUCOES[idioma_atual.get()]["desfazer"], command=lambda: desfazer(entradas, frame_imagens, status_label), style="Desfazer.TButton")
    botao_desfazer.pack(pady=5, fill=tk.X)

    # Frame Central (Fotos e Hist√≥rico)
    frame_central = ttk.Frame(janela, style="TFrame")
    frame_central.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=10, pady=10)

    frame_imagens = ttk.Frame(frame_central, height=250, style="TFrame")  # Aumentado para 250 para fotos maiores
    frame_imagens.pack(fill=tk.X, pady=5)

    frame_historico = ttk.Frame(frame_central, style="TFrame")
    frame_historico.pack(fill=tk.BOTH, expand=True, pady=10)
    # atualizar_historico_lojas ser√° chamado ap√≥s criar entradas

    # Frame Direito (Bot√µes superiores e Formul√°rio)
    frame_direita = ttk.Frame(janela, width=300, style="TFrame")
    frame_direita.pack(side=tk.RIGHT, fill=tk.Y, padx=10, pady=10)

    # Bot√µes de Configura√ß√µes e Ajuda no topo do frame_direita
    frame_superior_direito = ttk.Frame(frame_direita, style="TFrame")
    frame_superior_direito.pack(anchor="ne", pady=(0, 20))  # Espa√ßo de 20 pixels abaixo

    botao_ajuda = ttk.Button(frame_superior_direito, text=TRADUCOES[idioma_atual.get()]["ajuda"], command=abrir_janela_ajuda, style="Ajuda.TButton")
    botao_ajuda.pack(side=tk.LEFT, padx=5)

    ttk.Button(frame_superior_direito, text="‚öô", command=abrir_configuracoes).pack(side=tk.LEFT, padx=5)

    # Frame de Entradas (Formul√°rio) mais abaixo
    frame_entradas = ttk.Frame(frame_direita)
    frame_entradas.pack(anchor="n", pady=10)

    entradas = {}
    labels_entradas = []
    campos = ["fornecedor", "promotor", "rede", "loja", "analista", "estado", "cidade", "data", "hora"]
    for campo in campos:
        label = ttk.Label(frame_entradas, text=TRADUCOES[idioma_atual.get()][campo])
        label.pack(anchor="w", padx=5)
        labels_entradas.append(label)
        entrada = ttk.Entry(frame_entradas, width=30)
        entrada.pack(pady=2)
        entradas[campo.upper()] = entrada

    status_label = ttk.Label(janela, text="")
    status_label.pack(side=tk.BOTTOM, pady=5)

    label_marca_dagua = ttk.Label(janela, text="@KaynanMonteiro", font=("Arial", 10, "italic"), foreground=CORES["marca_dagua_claro"])
    label_marca_dagua.place(relx=1.0, rely=1.0, anchor="se", x=-10, y=-10)

    aplicar_tema()
    atualizar_historico_lojas(frame_historico, entradas, frame_imagens)
    verificar_periodicamente(entradas, frame_imagens)
    janela.mainloop()

if __name__ == "__main__":
    mostrar_tela_bem_vindo()
